@use 'sass:list';
@use 'sass:string';
@use 'sass:map';
@use 'vars' as *;

// Variables
$vendor-prefixes: ('-moz-', '-webkit-', '-ms-', '');
$vendor-properties: ('transform', 'background-image');
$vendor-values: ('transform', 'linear-gradient');

// String replacement functions
@function str-replace($string, $search, $replace) {
    $index: string.index($string, $search);

    @if $index {
        @return string.slice($string, 1, $index - 1) + $replace +
            string.slice($string, $index + string.length($search));
    }

    @return $string;
}

@function str-replace-all($string, $search, $replace) {
    // Check if it's a list using type-of instead of list.is-list
    @if type-of($string) == 'list' {
        $result: ();
        @each $item in $string {
            $result: list.append(
                $result,
                str-replace($item, $search, $replace)
            );
        }
        @return $result;
    }

    @return str-replace($string, $search, $replace);
}

// Vendor mixin
@mixin vendor($property, $value) {
    // Determine if property should expand
    $expandProperty: list.index($vendor-properties, $property);
    $expandValue: false;

    // Check value for vendor prefixes
    @each $x in $value {
        @each $y in $vendor-values {
            @if $y == string.slice($x, 1, string.length($y)) {
                $value: str-replace($x, $y, '-prefix-' + $y);
                $expandValue: true;
            }
        }
    }

    // Output property with vendor prefixes
    @if $expandProperty {
        @each $vendor in $vendor-prefixes {
            #{$vendor}#{$property}: #{str-replace-all(
                    $value,
                    '-prefix-',
                    $vendor
                )};
        }
    } @else if $expandValue {
        @each $vendor in $vendor-prefixes {
            #{$property}: #{str-replace-all($value, '-prefix-', $vendor)};
        }
    } @else {
        #{$property}: #{$value};
    }
}

// Breakpoints mixin
@mixin breakpoint($name) {
    @if map.has-key($breakpoints, $name) {
        @media screen and #{map.get($breakpoints, $name)} {
            @content;
        }
    }
}

// Padding mixin
@mixin padding($top, $right-left, $bottom-values) {
    padding: $top $right-left list.nth($bottom-values, 1) $right-left;

    @if list.length($bottom-values) > 1 {
        @media screen and (max-width: 736px) {
            padding: $top $right-left list.nth($bottom-values, 2) $right-left;
        }
    }

    @if list.length($bottom-values) > 2 {
        @media screen and (max-width: 480px) {
            padding: $top $right-left list.nth($bottom-values, 3) $right-left;
        }
    }
}

// Add this function near the top with the other functions
@function svg-url($svg) {
    // Add encoding for spaces
    $svg: str-replace($svg, ' ', '%20');

    // Add encoding for hash
    $svg: str-replace($svg, '#', '%23');

    // Add encoding for curly braces
    $svg: str-replace($svg, '{', '%7B');
    $svg: str-replace($svg, '}', '%7D');

    // Add encoding for semicolon
    $svg: str-replace($svg, ';', '%3B');

    @return 'data:image/svg+xml,' + $svg;
}
